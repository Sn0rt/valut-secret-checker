# Default values for valut-secret-checker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: "ghcr.io/sn0rt/valut-secret-checker"
  pullPolicy: IfNotPresent
  tag: "v0.0.5"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Pod Security Context
podSecurityContext:
  {}
  # fsGroup: 2000

# Security Context
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

podAnnotations: {}
podLabels: {}

service:
  type: ClusterIP
  port: 80
  targetPort: 3000

resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 128Mi

livenessProbe:
  enabled: true
  path: /
  initialDelaySeconds: 30
  periodSeconds: 10

readinessProbe:
  enabled: true
  path: /
  initialDelaySeconds: 5
  periodSeconds: 5

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables
env:
  # Vault endpoints (comma-separated list)
  NEXT_PUBLIC_VAULT_ENDPOINTS: "http://vault:8200,http://localhost:8200"
  # Custom application title (optional)
  NEXT_PUBLIC_APP_TITLE: ""
  # Kubernetes namespaces allowed for secret access (comma-separated list)
  # This controls both UI dropdown options and RBAC permissions
  K8S_NAMESPACE_LIST: "default,vault-system"
  # Debug mode (optional)
  DEBUG: "false"

  # SMTP Configuration for Email Notifications
  # SMTP server hostname or IP address
  SMTP_HOST: "xxx.com"
  # SMTP server port (25, 587, 465 are common)
  SMTP_PORT: "25"
  # SMTP authentication username (optional)
  SMTP_USER: ""
  # SMTP authentication password (optional)
  SMTP_PASSWORD: ""
  # Use secure connection (true for SSL/TLS, false for plain)
  SMTP_SECURE: "false"
  # From email address for notifications
  SMTP_FROM_EMAIL: "noreply@example.com"

# TLS Configuration
tls:
  # CA Certificate configuration
  ca:
    # Enable CA certificate mounting
    enabled: true
    # Certificate data (CA certificate content)
    # Can be either plain text PEM format or base64 encoded string
    certificateData: |
      -----BEGIN CERTIFICATE-----
      # Replace this with your actual CA certificate content
      # Example:
      # MIIDXTCCAkWgAwIBAgIJAKoK/heBjcOuMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
      # BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
      # aWRnaXRzIFB0eSBMdGQwHhcNMTcwODI3MTM0NTI3WhcNMjcwODI1MTM0NTI3WjBF
      # ... (rest of certificate content)
      -----END CERTIFICATE-----
    # Set to true if certificateData is already base64 encoded
    # Set to false if certificateData is plain text PEM format (default)
    isBase64Encoded: false
    # Name of the Kubernetes secret containing the CA certificate
    secretName: "custom-ca"
    # Key name within the secret that contains the CA certificate
    secretKey: "ca.crt"
    # Mount path for the CA certificate
    mountPath: "/etc/ssl/certs"
    # CA certificate filename
    fileName: "ca-certificates.crt"
